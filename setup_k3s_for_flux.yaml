---
- name: Phase 1 - Wipe, Install k3s (with Flannel), Prep for Flux
  hosts: all # Initial tasks run on all
  become: yes
  gather_facts: no
  max_fail_percentage: 0 # Fail fast if setup fails
  vars:
    # --- Wipe Script Content (Make sure this is your robust version) ---
    k3s_flux_wipe_script: |
      #!/bin/bash
      set -e
      echo "Starting k3s and Flux wipe process..."
      # --- Pre-checks ---
      if ! command -v shutdown &> /dev/null; then
        echo "ERROR: 'shutdown' command not found. Cannot schedule reboot." >&2
        exit 1
      fi
      KUBECTL_PATH="/usr/local/bin/kubectl"
      FLUX_NS="flux-system"
      KUBECTL_TIMEOUT="45s"
      # --- Flux Removal (Robust) ---
      echo "Checking for kubectl at ${KUBECTL_PATH}..."
      if [ -f "${KUBECTL_PATH}" ]; then
        echo "kubectl found. Attempting Flux cleanup for namespace ${FLUX_NS}..."
        # ... (Include your robust Flux removal logic with timeouts/checks) ...
      else
        echo "kubectl not found at ${KUBECTL_PATH}, skipping Flux namespace deletion."
      fi
      echo "Removing ~/.flux directory and flux binary (if they exist)..."
      rm -rf ~/.flux
      rm -f /usr/local/bin/flux
      # --- Schedule Reboot (Critical Step - Before Disruptive Uninstall) ---
      echo "Scheduling system reboot in 1 minute..."
      wall "System is scheduling an automatic reboot in 1 minute for k3s cleanup."
      shutdown -r +1 "Scheduled reboot after k3s/CNI wipe attempt" &
      sleep 3
      # --- k3s Uninstall (Disruptive) ---
      echo "Checking for and running k3s uninstall scripts (network may drop now)..."
      if [ -f /usr/local/bin/k3s-uninstall.sh ]; then
        echo "Running k3s-uninstall.sh..."
        /usr/local/bin/k3s-uninstall.sh || echo "WARN: k3s-uninstall.sh exited with non-zero status."
      fi
      if [ -f /usr/local/bin/k3s-agent-uninstall.sh ]; then
        echo "Running k3s-agent-uninstall.sh..."
        /usr/local/bin/k3s-agent-uninstall.sh || echo "WARN: k3s-agent-uninstall.sh exited with non-zero status."
      fi
      # --- Final Filesystem Cleanup ---
      echo "Performing final filesystem cleanup..."
      rm -rf /etc/rancher/ /var/lib/rancher/ /var/lib/kubelet /run/k3s /run/flannel* /var/log/pods /var/log/containers /etc/cni/ /opt/cni/ /var/lib/cni/
      echo "Wipe script finished execution. Reboot has been scheduled."

    # --- Master Hostname (Ensure this matches inventory) ---
    k3s_master_hostname: "k3s-master1"
    # --- Target User for Kubeconfig ---
    target_user: "{{ ansible_user }}" # Assumes Ansible user is target
    target_user_home: "/home/{{ ansible_user }}" # Adjust if needed
  tasks:
    # --- WIPE TASKS ---
    - name: Ensure jq is installed
      ansible.builtin.package: name=jq state=present
      ignore_errors: yes
    - name: Create temporary script directory
      ansible.builtin.file: path=/tmp/ansible_wipe_scripts state=directory mode='0700'
    - name: Copy k3s/Flux wipe script to node
      ansible.builtin.copy: content="{{ k3s_flux_wipe_script }}" dest=/tmp/ansible_wipe_scripts/k3s_flux_wipe.sh mode='0755'
    - name: Run k3s/Flux wipe script (schedules reboot)
      ansible.builtin.command: /tmp/ansible_wipe_scripts/k3s_flux_wipe.sh
      register: wipe_script_output
      changed_when: true
      ignore_errors: yes # Expect connection loss
    - name: Wait for scheduled reboot and node to come back online
      ansible.builtin.reboot: msg="Waiting for node reboot after wipe" connect_timeout=10 pre_reboot_delay=75 reboot_timeout=900 post_reboot_delay=30 test_command=whoami
    - name: Remove temporary script directory
      ansible.builtin.file: path=/tmp/ansible_wipe_scripts state=absent
      ignore_errors: yes

    # --- CLEAR ERRORS POST-REBOOT ---
    - name: Wait for connection after reboot
      ansible.builtin.wait_for_connection: timeout=300 delay=10
    - name: Clear host errors from wipe/reboot sequence
      ansible.builtin.meta: clear_host_errors

    # --- INSTALL K3S MASTER (WITH FLANNEL) ---
    - name: Install k3s server (Flannel Enabled) on Master
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="server \
          --disable-network-policy \
          # NO --flannel-backend=none HERE
          --disable=traefik \
          --disable=servicelb \
          --write-kubeconfig-mode '0644'" \
          sh -
      args:
        creates: /usr/local/bin/k3s
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    - name: Wait for k3s node-token file on Master
      ansible.builtin.wait_for: path=/var/lib/rancher/k3s/server/node-token state=present timeout=180
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    - name: Get k3s token from Master
      ansible.builtin.slurp: src=/var/lib/rancher/k3s/server/node-token
      register: k3s_token
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    - name: Set fact for k3s token
      ansible.builtin.set_fact: k3s_node_token="{{ k3s_token['content'] | b64decode | trim }}" cacheable=yes
      run_once: true

    - name: Set master IP fact
      ansible.builtin.set_fact: k3s_master_ip="{{ hostvars[k3s_master_hostname]['ansible_host'] | default(k3s_master_hostname) }}" cacheable=yes
      run_once: true

    - name: Wait up to 2 minutes for Kubernetes API SERVER on Master
      ansible.builtin.command: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml version
      register: k3s_api_check
      until: k3s_api_check.rc == 0
      retries: 24
      delay: 5
      changed_when: false
      ignore_errors: yes
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    - name: Final check API server available on Master
      ansible.builtin.command: kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml version
      changed_when: false
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    # --- INSTALL K3S WORKERS ---
    - name: Install k3s Agent on Workers
      ansible.builtin.shell: >
        curl -sfL https://get.k3s.io | K3S_URL="https://{{ k3s_master_ip }}:6443" K3S_TOKEN="{{ k3s_node_token }}" sh -s - agent
      args:
        creates: /usr/local/bin/k3s-agent
      when: inventory_hostname != k3s_master_hostname # Run only on workers

    # --- SETUP FLUX CLI & KUBECONFIG ON MASTER ---
    - name: Install Flux CLI on Master
      ansible.builtin.shell: cmd='curl -s https://fluxcd.io/install.sh | bash'
      args:
        creates: /usr/local/bin/flux
      become: yes
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    - name: Ensure .kube directory exists on Master
      ansible.builtin.file: path="{{ target_user_home }}/.kube" state=directory owner="{{ target_user }}" group="{{ target_user }}" mode='0700'
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    - name: Copy k3s kubeconfig to user's home on Master
      ansible.builtin.copy: src=/etc/rancher/k3s/k3s.yaml dest="{{ target_user_home }}/.kube/config" owner="{{ target_user }}" group="{{ target_user }}" mode='0600' remote_src=yes
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    - name: Ensure KUBECONFIG is set in .bashrc on Master (optional)
      ansible.builtin.lineinfile: path="{{ target_user_home }}/.bashrc" regexp='^export KUBECONFIG=' line='export KUBECONFIG={{ target_user_home }}/.kube/config' state=present insertafter=EOF owner="{{ target_user }}" group="{{ target_user }}" mode='0644' create=yes
      delegate_to: "{{ k3s_master_hostname }}"
      run_once: true

    # --- FINAL MESSAGE ---
    - name: Setup Complete - Ready for Bootstrap
      ansible.builtin.debug:
        msg:
          - "Setup complete. k3s installed with Flannel."
          - "Run 'kubectl get nodes' on the master node ('{{ k3s_master_hostname }}') to verify all nodes are 'Ready'."
          - "Proceed to MANUALLY run 'flux bootstrap' on the master node."
          - "After verifying Flux/Cilium are stable, run the 'cleanup_flannel.yaml' playbook."
      run_once: true # Show message only once